package cipher

import java.math.BigInteger
import java.security.{KeyFactory, PublicKey}
import java.security.KeyFactory
import java.security.PublicKey
import java.security.spec.X509EncodedKeySpec
import java.util.Base64

import javax.crypto.Cipher

object CipherUtils {

  def encodeBase64ToString(bytes: Array[Byte]): String
  = java.util.Base64.getEncoder.encodeToString(bytes)


  def decodeBase64FromString(text: String)
  = java.util.Base64.getDecoder.decode(text)


  /**
    * TODO: implement encoding
    * */
  def publicFromString (publicK: String): PublicKey = {

    val keyBytes = decodeBase64FromString(publicK)

    val spec = new X509EncodedKeySpec(keyBytes)
    val keyFactory = KeyFactory.getInstance("RSA")


    val key = keyFactory.generatePublic(spec)

    key
  }


  def encryptRSA(plainText: String, key: String): String = {

    val publicKey = publicFromString(key)

    println("Publick key(base64): " + encodeBase64ToString(publicKey.getEncoded))


    val encryptCipher = Cipher.getInstance("RSA")
    encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey)

     MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7xQ2nq/9JpegMzavHYB1Zf0m1TETzutEd+kLocJvKM56DbswNyvmtZJjGJqiesMKAKTNQE3dFx
vtCOr79k/w65LSgZcQYm0LqBBuDw7NSWW5GNnbKiCMlGcAH0zGnt+9QzKetirYhaew9LukY7aQ1qhtzdDw/mws7O6bOiv9XJ/1mJYRuopitZRmkWbpHntvhID7DTN0KXOA9FicHi6y9
Bl4O8MKDUP7NndqjiVNDzIxEPR7muuaDnIgZD2d2E7ws07bTQUkY4/dnR7wdhevcZ8U0U4yppy7k2vKxky40R9F36aAS8vnyluoYllufzvfEFeV2Rw6V3duRPFxVeZViwIDAQAB

    Base64.getEncoder.encodeToString(cipherText)
  }


}
